{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Cecilia\\\\IdeaProjects\\\\collaboreat\\\\client\\\\collaboreat-react\\\\src\\\\HealthInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ToDo from './components/ToDo';\nexport default function ToDosHooks() {\n  _s();\n\n  const [toDos, setToDos] = useState([]);\n  const history = useHistory();\n\n  const getToDos = () => {\n    fetch('http://localhost:8080/api/todos').then(response => response.json()).then(data => {\n      setToDos(data);\n    });\n  }; // This effect will only get called once when the component is initially rendered\n  // (this is the equivalent of componentDidMount() in a class component)\n\n\n  useEffect(() => {\n    getToDos();\n  }, []); // // This effect will get called every time \"id\" or \"mode\" are changed\n  // useEffect(() => {\n  //   // TODO do something with \"id\" or \"mode\"\n  // }, [id, mode]);\n\n  const deleteToDoHandler = toDoId => {\n    // DELETE http://localhost:8080/api/todos/1 HTTP/1.1\n    fetch(`http://localhost:8080/api/todos/${toDoId}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.status === 204) {\n        console.log('Success!');\n        getToDos();\n      } else {\n        console.log('Delete failed for some reason: ' + response);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"ToDos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success m-3\",\n        onClick: () => history.push('/add'),\n        children: \"Add ToDo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-dark table-striped table-hover\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"ToDo Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"\\xA0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: toDos.map(toDo => /*#__PURE__*/_jsxDEV(ToDo, {\n          toDo: toDo,\n          deleteToDo: deleteToDoHandler\n        }, toDo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ToDosHooks, \"s62U0mUuz3LBuf5JIuCyKKkMPq8=\", false, function () {\n  return [useHistory];\n});\n\n_c = ToDosHooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDosHooks\");","map":{"version":3,"sources":["C:/Users/Cecilia/IdeaProjects/collaboreat/client/collaboreat-react/src/HealthInfo.js"],"names":["React","useState","useEffect","useHistory","ToDo","ToDosHooks","toDos","setToDos","history","getToDos","fetch","then","response","json","data","deleteToDoHandler","toDoId","method","status","console","log","push","map","toDo","id"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGL,UAAU,EAA1B;;AAEA,QAAMM,QAAQ,GAAG,MAAM;AACrBC,IAAAA,KAAK,CAAC,iCAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACZP,MAAAA,QAAQ,CAACO,IAAD,CAAR;AACD,KAJH;AAKD,GAND,CALmC,CAanC;AACA;;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT,CAfmC,CAmBnC;AACA;AACA;AACA;;AAEA,QAAMM,iBAAiB,GAAIC,MAAD,IAAY;AACpC;AACAN,IAAAA,KAAK,CAAE,mCAAkCM,MAAO,EAA3C,EAA8C;AACjDC,MAAAA,MAAM,EAAE;AADyC,KAA9C,CAAL,CAGCN,IAHD,CAGMC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAX,QAAAA,QAAQ;AACT,OAHD,MAGO;AACLU,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCR,QAAhD;AACD;AACF,KAVD;AAWD,GAbD;;AAeA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,qBAAlB;AAAwC,QAAA,OAAO,EAAE,MAAMJ,OAAO,CAACa,IAAR,CAAa,MAAb,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF,eAOE;AAAO,MAAA,SAAS,EAAC,4CAAjB;AAAA,8BACE;AAAA,+BACE;AAAA,kCACE;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAA,kBACGf,KAAK,CAACgB,GAAN,CAAUC,IAAI,iBACb,QAAC,IAAD;AACE,UAAA,IAAI,EAAEA,IADR;AAEE,UAAA,UAAU,EAAER;AAFd,WAAWQ,IAAI,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA,kBADF;AAyBD;;GAhEuBnB,U;UAGNF,U;;;KAHME,U","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport ToDo from './components/ToDo';\r\n\r\nexport default function ToDosHooks() {\r\n  const [toDos, setToDos] = useState([]);\r\n\r\n  const history = useHistory();\r\n\r\n  const getToDos = () => {\r\n    fetch('http://localhost:8080/api/todos')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setToDos(data);\r\n      });\r\n  };\r\n\r\n  // This effect will only get called once when the component is initially rendered\r\n  // (this is the equivalent of componentDidMount() in a class component)\r\n  useEffect(() => {\r\n    getToDos();\r\n  }, []);\r\n\r\n  // // This effect will get called every time \"id\" or \"mode\" are changed\r\n  // useEffect(() => {\r\n  //   // TODO do something with \"id\" or \"mode\"\r\n  // }, [id, mode]);\r\n\r\n  const deleteToDoHandler = (toDoId) => {\r\n    // DELETE http://localhost:8080/api/todos/1 HTTP/1.1\r\n    fetch(`http://localhost:8080/api/todos/${toDoId}`, {\r\n      method: 'DELETE'\r\n    })\r\n    .then(response => {\r\n      if (response.status === 204) {\r\n        console.log('Success!');\r\n        getToDos();\r\n      } else {\r\n        console.log('Delete failed for some reason: ' + response);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>ToDos</h2>\r\n\r\n      <div>\r\n        <button className=\"btn btn-success m-3\" onClick={() => history.push('/add')}>Add ToDo</button>\r\n      </div>\r\n\r\n      <table className=\"table table-dark table-striped table-hover\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">ToDo Description</th>\r\n            <th scope=\"col\">&nbsp;</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {toDos.map(toDo => (\r\n            <ToDo key={toDo.id} \r\n              toDo={toDo} \r\n              deleteToDo={deleteToDoHandler} />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}